#Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка (Cell).
# В его конструкторе инициализировать параметр (quantity),
# соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (add()),
# вычитание (sub()),
# умножение (mul()),
# деление (truediv()).
# Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# ** - По желанию: В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __add__(self, other):
        return f"Результат объединения двух клеток: {self.quantity + other.quantity}"
        
    def __sub__(self, other):
        result = self.quantity - other.quantity
        if result > 0:
            return f"Результат вычитания клеток = {result}"
        else:
            return "Количество клеток не может быть отрицательным"

    
    def __mul__(self, other):
        return f"Умножение двух клеток: {self.quantity * other.quantity}"

    
    def __truediv__(self, other):
        return f"Деление двух клеток: {self.quantity // other.quantity}"

    
    def make_order(self, row):
        r = ''
        for i in range(int(self.quantity / row)):
            r += f'{"*" * row} \\n'
        r += f'{"*" * (self.quantity % row)}'
        return r

cel_1 = Cell (30)
cel_2 = Cell (16)
print (cel_1 + cel_2)
print(cel_1 - cel_2)
print(cel_1 * cel_2)
print(cel_1 / cel_2)
print()
print(cel_1.make_order(4))



